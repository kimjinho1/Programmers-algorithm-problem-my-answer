나의 답   
def solution(v):  
    li1 = []  
    li2 = []  
    ans = []  
    for i in v:  
        li1.append(i[0])  
        li2.append(i[1])  
    for i in li1:  
        if li1.count(i) == 1:  
            ans.append(i)  
    for i in li2:  
        if li2.count(i) == 1:  
            ans.append(i)  
    return ans
   
print(solution([[1, 4], [3, 4], [3, 10]]))
print(solution([[1, 1], [2, 2], [1, 2]]))

분명 현명한 방법이 있을탠데 생각이 나지 않아서 어떻게든 풀기만 했다..  
점이 3개 주어졌을 때 x좌표와 y좌표를 따로 모아 놓고, 각 리스트 중 혼자 있는 숫자를 보면  
우리가 원하는 직사각형의 좌표임을 알 수 있다. 예시를 들면 [[1,2],[1,4],[3,4]]와 같이 세 점이 주어졌다 치자.
x축과 y축의 좌표들만 따로 모으면 [1,1,3], [2,4,4]가 된다. 여기서 각 리스트중 혼자 있는 숫자를 보면  
3과 2인데 [3,2]는 우리가 찾고자 하는 좌표임을 알 수 있다.  

해설 답  
def solution(v):  
    ans = [0,0]  
    for i in range(3):  
        ans[0] ^= v[i][0]  
        ans[1] ^= v[i][1]   
    return ans  
    
print(solution([[1, 4], [3, 4], [3, 10]]))
print(solution([[1, 1], [2, 2], [1, 2]]))

내가 생각했던 방식이 의외로? 정답이었다. 하지만 답은 코드는 훨씬더 간단했다.
A xor A xor B = B 이식의 의미하는건 같은 값 2개와 다른 값 1개를 모두 xor하면 다른 값 하나가 나온다는 것이다.
이것을 통해서 내가 반복문 2 3번 돌렸던것을 한 번에 해결할 수 있었다.
^연산자를 한번도 써보지 않아서 생각을 할 수가 없었던 것 같기도 하다. 반갑다 ^아 ^^
